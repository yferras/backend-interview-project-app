#+title: Backend for the Code challenge (NinjaOne)
#+author: Yeinier FerrÃ¡s Cecilio.
#+LANGUAGE: en


* Main target.

Implement a REST API in Java with data persistence and caching to fulfill the
basic requirements of a Remote Monitoring and Management (RMM) platform.

** Introduction.

A Remote Monitoring and Management (RMM) platform helps IT professionals manage
a fleet of Devices with Services associated with them. This Web Service will
fulfill the most basic requirements of an RMM by keeping a simple inventory of
Devices and Services to calculate their total costs.

Breakdown of Service costs by Device Type:

#+caption: Services and costs
#+name: tbl:services_cost_per_device_type
|-----------------------|---------------|
| Type                  | Price         |
|-----------------------|---------------|
| Device of any type    | $4 per device |
| Antivirus for Windows | $5 per device |
| Antivirus for Mac     | $7 per device |
| Backup                | $3 per device |
| Screen Share          | $1 per device |
|-----------------------+---------------|

Devices have the following properties:
- Id
- System Name
- Type (Windows Workstation, Windows Server, Mac, etc.)


** Requirements.

1. Implement a simple data model and persistence for Devices and the Services
   associated with them.
2. Implement endpoints and logic for the following.
   - Add, Delete (no edits) for Devices. Duplicate Devices should not be
     allowed.
   - Add, Delete (no edits) for Services and their cost. Duplicate Services
     should not be allowed.
   - Add, Delete (no edits) for Services assigned to a Device.
   - Calculate the total cost of the services depending on Services used by a
     Device.

     *Example*:
     Customer with 2 Windows and 3 Macs, with the following Services:
     #+caption: Distribution of the devices by services.
     #+name: tbl:example_distribution_devices_by_services
     |-------------+-----------+--------+--------------|
     | Device Type | Antivirus | Backup | Screen Share |
     |-------------+-----------+--------+--------------|
     | Windows     |         2 |      1 |            2 |
     | Mac         |         3 |      2 |            2 |
     |-------------+-----------+--------+--------------|
     | *Total ($)* |   *31.00* | *9.00* |       *4.00* |
     |-------------+-----------+--------+--------------|
     *Total Cost:* $64

     Explanation:
     |--------------+---------------------------+----------|
     | Category     | Description               | Cost ($) |
     |--------------+---------------------------+----------|
     | Devices      | 5 devices X 4.00          |    20.00 |
     | Antivirus    | (2W X 5.00) + (3M X 7.00) |    31.00 |
     | Backup       | (1W + 2M) X 3.00          |     9.00 |
     | Screen share | (2W + 2M) X 1.00          |     4.00 |
     |--------------+---------------------------+----------|
     |              | *Total ($)*               |  *64.00* |
     |--------------+---------------------------+----------|

3. Implement a rudimentary cache for the calculation per device. Note that the
   cache must be re-evaluated any time a service is added to a Device.


* Run the application.
** Pre-requisites.

Before running the application, You must be installed:
1. JVM, version 11 or above.
2. Gradle, version 7.2.
3. Git.
4. cURL or Postman.

** Clone the repository and run the application.

To run the application You must clone the repository. In a terminal execute:

#+begin_src bash
$> git clone https://github.com/yferras/backend-interview-project-app.git
#+end_src

After cloning the repository get into the new folder:
*backend-interview-project-app*.


#+begin_src bash
$> cd backend-interview-project-app
#+end_src

Finally, to run the application:

#+begin_src bash
$> gradle bootRun
#+end_src


** About the database.

When the application is running, the database will also already be initialized
with the data provided as the basis for carrying out this exercise.

The main concepts from the problem's description:

1. device's type, has a unique name and identifier:
   #+caption: DEVICE_TYPE.
   #+name: tbl:tbl_DEVICE_TYPE
   |----+---------|
   | id | name    |
   |----+---------|
   |  1 | linux   |
   |  2 | mac     |
   |  3 | windows |
   |  4 | android |
   |----+---------|

2. service has a unique name (the names are provided by the problem's
   description), the identifier, price, and finally a field to describe if the
   service apply to all device by default.
   #+caption: SERVICE.
   #+name: tbl:tbl_SERVICE
   |----+-----------------------+-------+--------------|
   | id | name                  | price | apply_to_all |
   |----+-----------------------+-------+--------------|
   |  1 | Default               |  4.00 | true         |
   |  2 | Antivirus for Mac     |  7.00 | false        |
   |  3 | Antivirus for Windows |  5.00 | false        |
   |  4 | Backup                |  3.00 | false        |
   |  5 | Screen Share          |  1.00 | false        |
   |----+-----------------------+-------+--------------|

3. device (table name: DEVICE): has a unique name, identifier and the its type
   (defined in the first place), additionally the owner of each device reflected
   as the user's identifier:
   #+caption: DEVICE.
   #+name: tbl:tbl_DEVICE
   |----+-------------+------------------+-------------|
   | id | name        | device_type      | app_user_id |
   |----+-------------+------------------+-------------|
   |  1 | Mac - 1     | mac->(ID: 2)     |           0 |
   |  2 | Mac - 2     | mac->(ID: 2)     |           0 |
   |  3 | Mac - 3     | mac->(ID: 2)     |           0 |
   |  4 | Windows - 1 | windows->(ID: 3) |           0 |
   |  5 | Windows - 2 | windows->(ID: 3) |           0 |
   |----+-------------+------------------+-------------|
   The data to fill this table come from the same requirements example.

4. For validation purposes a *many-to-many* relationship was added between
   service and the device's type, so a service like: 'Antivirus for Mac' cannot
   be applied to other device type than 'mac'. The configuration
   #+caption: SERVICE_IN_DEVICE_TYPE.
   #+name: tbl:tbl_SERVICE_IN_DEVICE_TYPE
   |------------------+------------------------------|
   | device_type      | service                      |
   |------------------+------------------------------|
   | linux->(ID: 1)   | Backup(ID: 4)                |
   | linux->(ID: 1)   | Screen Share(ID: 5)          |
   |------------------+------------------------------|
   | mac->(ID: 2)     | Antivirus for Mac(ID: 2)     |
   | mac->(ID: 2)     | Backup(ID: 4)                |
   | mac->(ID: 2)     | Screen Share(ID: 5)          |
   |------------------+------------------------------|
   | windows->(ID: 3) | Antivirus for Windows(ID: 3) |
   | windows->(ID: 3) | Backup(ID: 4)                |
   | windows->(ID: 3) | Screen Share(ID: 5)          |
   |------------------+------------------------------|
   | android->(ID: 4) | Backup(ID: 4)                |
   | android->(ID: 4) | Screen Share(ID: 5)          |
   |------------------+------------------------------|
   Note that, the service: 'Default' is not present in this configuration
   because by default will be applied to all devices registered in the
   application.
5. Finally to accomplish one of the requirements a *many-to-many* relationship
   between the service and the device was added. This table also was filled with
   the example provided.
   #+caption: SERVICE_IN_DEVICE.
   #+name: tbl:tbl_SERVICE_IN_DEVICE
   |----------------------+----------------------------|
   | service              | device                     |
   |----------------------+----------------------------|
   | Mac - 1->(ID: 1)     | Antivirus for Mac->(ID: 2) |
   | Mac - 1->(ID: 1)     | Backup->(ID: 4)            |
   | Mac - 1->(ID: 1)     | Screen Share->(ID: 5)      |
   | Mac - 2->(ID: 2)     | Antivirus for Mac->(ID: 2) |
   | Mac - 2->(ID: 2)     | Backup->(ID: 4)            |
   | Mac - 3->(ID: 3)     | Antivirus for Mac->(ID: 2) |
   | Mac - 3->(ID: 3)     | Screen Share->(ID: 5)      |
   | Windows - 1->(ID: 4) | Antivirus for Windows      |
   | Windows - 1->(ID: 4) | Backup->(ID: 4)            |
   | Windows - 1->(ID: 4) | Screen Share->(ID: 5)      |
   | Windows - 2->(ID: 5) | Antivirus for Windows      |
   | Windows - 2->(ID: 5) | Screen Share->(ID: 5)      |
   |----------------------+----------------------------|
   This data combination matches perfectly with the description of the [[tbl:example_distribution_devices_by_services][example]].

You can feel free to use the majority of the data presented above to run the
commands in the next sections.

For example, if you want to refer to the device's type: 'mac' you can use
either the name or its identifier.

* Endpoints.

** Devices.

You can access to this endpoint with this URL:

http://localhost:8081/v1/device

*** Add new devices.

To store new devices, you can use the *POST* method and describe the device's
data in JSON format.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "<DEVICE_NAME>",
    "deviceType": {
        "name": "<DEVICE_TYPE_NAME>"
    }
}'
#+end_src

Alternatively (and also equivalent to the last command).

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "<DEVICE_NAME>",
    "deviceType": {
        "id": "<DEVICE_TYPE_ID>"
    }
}'
#+end_src

Where:
- ~<DEVICE_NAME>~ :: Is the name for the new device.
- ~<DEVICE_TYPE_NAME>~ :: Is the name of the device's type.
- ~<DEVICE_TYPE_ID>~ :: Is the device's identifier.
and the placeholders: ~<DEVICE_TYPE_ID>~ or ~<DEVICE_TYPE_ID>~ only can be
substituted with the values from the table: [[tbl:tbl_DEVICE_TYPE][DEVICE_TYPE]]

If the insertion process is successful. The returned status will be: *201
Created*, also a JSON will be returned.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "Linux - 1",
    "deviceType": {
        "name": "linux"
    }
}'

HTTP/1.1 201
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 15:54:20 GMT

{"id":6,"name":"Linux - 1","deviceType":{"id":1,"name":"linux"},"customerId":0}%
$>
#+end_src

The JSON is the current device inserted in the database:

#+begin_src jsonc
{
   "customerId" : 0,
   "deviceType" : {
      "id" : 1, // <--- id from database
      "name" : "linux"
   },
   "id" : 6, // <--- id from database
   "name" : "Linux - 1"
}
#+end_src

**** Validations.

In the JSON you can only specify one of the properties of ~deviceType~: ~name~
or ~id~, but not both at the same time. For example this JSON is not allowed
(even if the combination exists):
#+begin_src json
{
    "name": "computer #1",
    "deviceType": {
        "id": "1",
        "name": "linux"
    }
}
#+end_src

And if it is used, a validation error it will be returned in conjunction with the
status *422 Unprocessable*. This behavior is to prevent any non-existent data
combinations. Let's test it:

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "computer #1",
    "deviceType": {
        "id": 1,
        "name": "linux"
    }
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 16:15:45 GMT

{"deviceType":["only one of the fields: 'id' or 'name' is required."],"type":"DeviceDto","value":{"id":null,"name":"computer #1","deviceType":{"id":1,"name":"linux"},"customerId":null}}%
$>
#+end_src

The returned content is a JSON:

#+begin_src jsonc
{
  "deviceType": [ // <--- the validation messages.
    "only one of the fields: 'id' or 'name' must be required."
  ],
  "type": "DeviceDto", // <--- Object name.
  "value": { // <--- input data.
    "id": null,
    "name": "computer #1",
    "deviceType": {
      "id": 1,          // <--- Both fiedls are declared
      "name": "linux"   // <--- at the same time.
    },
    "customerId": null
  }
}
#+end_src

Where:
 - ~deviceType~ :: is an array that contains all error messages. The name of
   this property is the name of the current problematic field (for this example
   the name is ~deviceType~).
 - ~type~ :: is the name of the actual DTO supplied
 - ~value~ :: is the supplied object.

Also, if the correct format is used (using one of the properties), the existence
of the given data, will be checked against the database; if not exist a *404 Not
Found* (e.g.: the supplied values for: ~<DEVICE_TYPE_ID>~ or
~<DEVICE_TYPE_NAME>~ are not present in the database). In the response
additionally comes the valid combinations that you can use to fix the problem.
See:

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "computer #1",
    "deviceType": {
        "id": -100
    }
}'

HTTP/1.1 404
Content-Type: text/plain;charset=UTF-8
Content-Length: 210
Date: Mon, 19 Dec 2022 16:14:04 GMT

E::DeviceType(id = -100) Not found. Valid combinations are: DeviceType(id = 4, name = "android") or DeviceType(id = 1, name = "linux") or DeviceType(id = 2, name = "mac") or DeviceType(id = 3, name = "windows")%
$>
#+end_src

The same happens if you provied a non-existent value for ~deviceType.name~.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "computer #1",
    "deviceType": {
        "name": "bsd"
    }
}'
HTTP/1.1 404
Content-Type: text/plain;charset=UTF-8
Content-Length: 213
Date: Mon, 19 Dec 2022 16:19:36 GMT

E::DeviceType(name = "bsd") Not found. Valid combinations are: DeviceType(id = 4, name = "android") or DeviceType(id = 1, name = "linux") or DeviceType(id = 2, name = "mac") or DeviceType(id = 3, name = "windows")%
$>
#+end_src


Other validations performed:

- ~deviceType~ cannot be null. The status returned in these cases: *422
  Unprocessable Entity*. In the next command, the property will be omitted.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "computer #1"
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 16:21:12 GMT

{"deviceType":["cannot be null."],"type":"DeviceDto","value":{"id":null,"name":"computer #1","deviceType":null,"customerId":null}}%
$>
  #+end_src

The JSON returned:

#+begin_src jsonc
{
   "deviceType" : [// <--- the validation messages
      "cannot be null."
   ],
   "type" : "DeviceDto", // <--- Object name.
   "value" : { // <--- input data.
      "customerId" : null,
      "deviceType" : null, // <--- the problem.
      "id" : null,
      "name" : "computer #1"
   }
}
#+end_src

- ~name~ cannot be neither null, neither empty nor blank string. The status
  returned in these cases is: *422 Unprocessable Entity*.
  - Null value:
    #+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": null,
    "deviceType": {
        "name": "linux"
    }
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 16:37:55 GMT

{"name":["cannot be null."],"type":"DeviceDto","value":{"id":null,"name":null,"deviceType":{"id":null,"name":"linux"},"customerId":null}}%
$>
    #+end_src

The JSON returned:

#+begin_src jsonc
{
   "name" : [ // <--- the validation messages
      "cannot be null."
   ],
   "type" : "DeviceDto", // <--- Object name.
   "value" : { // <--- input data.
      "customerId" : null,
      "deviceType" : null,
      "id" : null,
      "name" : null // <--- the problem.
   }
}
#+end_src

  - Empty string:
 #+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "",
    "deviceType": {
        "name": "linux"
    }
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 16:39:00 GMT

{"name":["cannot be an empty string."],"type":"DeviceDto","value":{"id":null,"name":"","deviceType":{"id":null,"name":"linux"},"customerId":null}}%
$>
    #+end_src

The JSON returned:

#+begin_src jsonc
{
   "name" : [ // <--- the validation messages
      "cannot be an empty string."
   ],
   "type" : "DeviceDto", // <--- Object name.
   "value" : { // <--- input data.
      "customerId" : null,
      "deviceType" : null,
      "id" : null,
      "name" : "" // <--- the problem.
   }
}
#+end_src

  - Blank string:
#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "    ",
    "deviceType": {
        "name": "linux"
    }
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 16:52:59 GMT

{"name":["cannot be an empty string."],"type":"DeviceDto","value":{"id":null,"name":"    ","deviceType":{"id":null,"name":"linux"},"customerId":null}}%
$>
#+end_src

The JSON returned:

#+begin_src jsonc
{
   "name" : [ // <--- the validation messages
      "cannot be an empty string."
   ],
   "type" : "DeviceDto", // <--- Object name.
   "value" : { // <--- input data.
      "customerId" : null,
      "deviceType" : null,
      "id" : null,
      "name" : "    " // <-- the problem
   }
}
#+end_src


- The device name is unique in the database. Let's use a name that has already been used.
  #+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/devices' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "Mac - 1",
    "deviceType": {
        "name": "linux"
    }
}
'HTTP/1.1 409
Content-Type: text/plain;charset=UTF-8
Content-Length: 26
Date: Mon, 19 Dec 2022 16:41:25 GMT

Data duplication [Device].%
$>
  #+end_src

  In theses cases the status returned is: *409 Conflicted*.

*** Delete the devices.

To delete a specific device, you can use its identifier and calling the *DELETE*
method on the endpoint. As shown below:

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/devices/<ID>'
#+end_src

Where ~<ID>~ is the actual identifier.

If the identifier exists in the database and the deletion process is successful,
the status code must be *200 OK*, and nothing is printed in the terminal.

Let's delete the device with identifier 1.

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/devices/1'
HTTP/1.1 200
Content-Length: 0
Date: Mon, 19 Dec 2022 16:42:37 GMT

$>
#+end_src

Otherwise if the identifier doesn't exists, an error message will be printed in
the terminal. The status will be: *404 Not Found*.

Let's execute the last command again.

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/devices/1'
HTTP/1.1 404
Content-Type: text/plain;charset=UTF-8
Content-Length: 28
Date: Mon, 19 Dec 2022 16:43:18 GMT

E::Device(ID = 1) Not found.%
$>
#+end_src

WARNING: if you delete some data the subsequent results will be affected. If
that case happens you could stop the server by pressing ~Ctrl + C~ where the
server is running and then repeat the command:

#+begin_src bash
$> gradle bootRun
$>
#+end_src

** Service.

You can access to this endpoint with this URL:

http://localhost:8081/v1/service

*** Add new services.

To store new services, you can use the *POST* method and describe the device's
data in JSON format.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/services' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "<SERVICE_NAME>",
    "price": <SERVICE_PRICE>
}'
#+end_src

Where:
- ~<SERVICE_NAME>~ :: Is the name of the service.
- ~<SERVICE_PRICE>~ :: Is the price of the service.

If the data provided is valid and the insertion process is successful, the
returned status will be: *201 Created*. In addition the inserted service will be
returned as JSON.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/services' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "monitoring",
    "price": 10.50
}'
HTTP/1.1 201
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 18:05:13 GMT

{"id":6,"name":"monitoring","price":10.5}%

#+end_src

The JSON:

#+begin_src jsonc
{
    "id": 6,
    "name": "monitoring",
    "price": 10.5
}
#+end_src

**** Validations.

For this endpoint the validations are:

- ~name~ cannot be neither null, neither empty nor blank string. The status
  returned in these cases is: *422 Unprocessable Entity*. The process is similar
  to the validations in the ~name~ of the Device.
- ~price~ also cannot be null, or a value less than 0.0.
  - Null:
#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/services' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "monitoring"
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 18:22:40 GMT

{"price":["cannot be null."],"type":"ServiceDto","value":{"id":null,"name":"monitoring","price":null}}%
#+end_src

The JSON returned:

#+begin_src jsonc
{
   "price" : [ // <--- the validation messages
      "cannot be null."
   ],
   "type" : "ServiceDto", // <--- the validation messages
   "value" : { // <--- the validation messages
      "id" : null,
      "name" : "monitoring",
      "price" : null // <--- the problem
   }
}
#+end_src

  - Less than 0.0:

#+begin_src bash
curl -i --location --request POST 'http://localhost:8081/v1/services' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "monitoring",
    "price": -5.00
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 18:27:46 GMT

{"price":["cannot be less than 0.0."],"type":"ServiceDto","value":{"id":null,"name":"monitoring","price":-5.0}}%
#+end_src

The JSON returned:

#+begin_src jsonc
{
   "price" : [ // <--- the validation messages
      "cannot be less than 0.0."
   ],
   "type" : "ServiceDto", // <--- the validation messages
   "value" : { // <--- the validation messages
      "id" : null,
      "name" : "monitoring",
      "price" : -5 // <--- the problem
   }
}
#+end_src


*** Delete the services.

To delete a specific service, you can use its identifier and calling the *DELETE*
method on the endpoint. As shown below:

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/services/<ID>'
#+end_src

Where ~<ID>~ is the actual identifier.

If the identifier exists in the database and the deletion process is successful,
the status code must be *200 OK*, and nothing is printed in the terminal.

Let's delete the service with identifier 1.

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/services/1'
HTTP/1.1 200
Content-Length: 0
Date: Mon, 19 Dec 2022 18:34:40 GMT

$>
#+end_src

Otherwise if the identifier doesn't exists, an error message will be printed in
the terminal. The status will be: *404 Not Found*.

Let's execute the last command again.

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/services/1'
HTTP/1.1 404
Content-Type: text/plain;charset=UTF-8
Content-Length: 28
Date: Mon, 19 Dec 2022 18:35:17 GMT

E::Service(ID = 1) Not found.%
$>
#+end_src

WARNING: if you delete some data the subsequent results will be affected. If
that case happens you could stop the server by pressing ~Ctrl + C~ where the
server is running and then repeat the command:

#+begin_src bash
$> gradle bootRun
$>
#+end_src


** Add/Remove services to devices.

You can create a relationship between service and device using this endpoint:

http://localhost:8081/v1/config

And a JSON that has the following structure:

#+begin_src jsonc
{
    "device": "<DEVICE_NAME>"|<DEVICE_ID>,
    "service": "<SERVICE_NAME>"|<SERVICE_ID>
}
#+end_src

Any combination between the values is allowed:

#+begin_src jsonc
{
    "device":  "<DEVICE_NAME>"
    "service": "<SERVICE_NAME>"
}
// OR
{
    "device": <DEVICE_ID>,
    "service":<SERVICE_ID>
}
// OR
{
    "device": "<DEVICE_NAME>"
    "service": <SERVICE_ID>
}
// OR
{
    "device": <DEVICE_ID>,
    "service": "<SERVICE_NAME>"
}
#+end_src

Where:
- ~<DEVICE_NAME>~ :: Is the name of the device.
- ~<SERVICE_ID>~ :: Is the identifier of the device.
- ~<SERVICE_NAME>~ :: Is the name of the service.
- ~<DEVICE_ID>~ :: Is the identifier of the service.

The same structure will be used to: create a new relationship between the
service and the device; or delete the relationship. The only difference to
achieve this is the method used:
- POST: creates a relationship between service and device.
- DELETE: removes the relationship.

**** Add.

With this example we are adding the service: 'Backup' to 'Windows - 2':

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/config' \
--header 'Content-Type: application/json' \
--data-raw '{
    "device": "Windows - 2",
    "service": "Backup"
}'
HTTP/1.1 201
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 18:43:29 GMT

{"device":"Windows - 2","service":"Backup","enabled":true}%
$>
#+end_src

If all goes well, the status *201 Created* is returned, and also we receive a JSON
similar to it was sent it:

#+begin_src jsonc
{
   "device" : "Windows - 2",
   "enabled" : true, // <--- The relationship was created.
   "service" : "Backup"
}
#+end_src

the difference is that this JSON has a property:
~enabled~ equals to ~true~. The ~true~ value means that the relationship between
the service and the device was create.


**** Delete.

To remove the service 'Backup' from the device 'Windows - 2', only the method
is changed to DELETE:

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/config' \
--header 'Content-Type: application/json' \
--data-raw '{
    "device": "Windows - 2",
    "service": "Backup"
}'
HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 18:43:29 GMT

{"device":"Windows - 2","service":"Backup","enabled":false}%
$>
#+end_src

If all goes well, the status *200 Ok* is returned, and also we receive a JSON:

#+begin_src jsonc
{
   "device" : "Windows - 2",
   "enabled" : false, // <--- The relationship was removed.
   "service" : "Backup"
}
#+end_src

Here ~false~ value means that the relationship between
the service and the device was removed.

**** Validations (Add/Remove).

For this endpoint the validations are similar to the previous endpoints.

None of the fields cannot be null neither empty nor blank string. The status in
the validation fails will be: *422 Unprocessable entity*.

#+begin_src bash
$> curl -i --location --request DELETE 'http://localhost:8081/v1/config' \
--header 'Content-Type: application/json' \
--data-raw '{
    "device": "",
    "service": "Backup"
}'
HTTP/1.1 422
Content-Type: application/json
Transfer-Encoding: chunked
Date: Mon, 19 Dec 2022 19:10:31 GMT

{"type":"ConfigServiceDeviceRelDto","device":["Cannot be an empty string."],"value":{"device":"","service":"Backup","enabled":null}}%
#+end_src

Also non-existent data will be validated, the status will be: *404 Not founf*.

#+begin_src bash
$> curl -i --location --request POST 'http://localhost:8081/v1/config' \
--header 'Content-Type: application/json' \
--data-raw '{
    "device": "Linux - 1",
    "service": "Backup"
}'
HTTP/1.1 404
Content-Type: text/plain;charset=UTF-8
Content-Length: 40
Date: Mon, 19 Dec 2022 19:11:29 GMT

E::Device(name = "Linux - 1") Not found.%
#+end_src


** Total cost per customer.


http://localhost:8081/v1/reports/total-per-customer/<ID>


TO-DO


** Using the caches.

There are two caches. One that is pre-loaded when the app is started, and other
that loads the data on demand.

Both cache share the same URL:

http://localhost:8081/v1/devices/caches/

But the difference to access one or the other is the type of the data. If you
use the device's identifier you must be accessing the pre-loaded cache; but if
you use the name of the device (a string) instead you are accessing the cache
that loads the data on demand.

Example to get the info



TO-DO



#  LocalWords:  DTO JVM cURL Gradle Unprocessable JSON RMM
